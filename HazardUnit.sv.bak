
`timescale 1ns/1ps

// HazardUnit 模块：
// 中文：用于检测上一条指令是否是Load，以及当前指令是否需要该寄存器 => 如果是，则输出stall=1
// English: Detects load-use hazard. If the previous instruction in ID_EX is a load, and 
// the current instruction (in IF/ID) depends on that register, we stall one cycle.

module HazardUnit(
    // 上一条指令（ID_EX阶段）的信息
    input  logic       id_ex_memRead, // Whether the previous instruction is a load
    input  logic [4:0] id_ex_rd_idx,  // Destination register of the previous instruction

    // 当前指令（IF/ID阶段）的rs1, rs2
    input  logic [4:0] if_id_rs1_idx,
    input  logic [4:0] if_id_rs2_idx,

    // 输出：stall=1表示流水线暂停1个周期
    output logic       stall
);

    always_comb begin
        
		  stall = 1'b0;

        // 条件： 上一条指令是Load；且 它的rd != x0；且 当前指令需要该rd
        if (id_ex_memRead && (id_ex_rd_idx != 5'd0) &&
           ((id_ex_rd_idx == if_id_rs1_idx)||(id_ex_rd_idx == if_id_rs2_idx))) begin
            
				stall = 1'b1;
        
		  end
    end

endmodule
