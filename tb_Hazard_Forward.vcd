$date
	Tue Mar 18 07:09:35 2025
$end
$version
	ModelSim Version 2020.1
$end
$timescale
	1ps
$end

$scope module tb_Hazard_Forward $end
$var reg 1 ! hazard_id_ex_memRead $end
$var reg 5 " hazard_id_ex_rd_idx [4:0] $end
$var reg 5 # hazard_if_id_rs1_idx [4:0] $end
$var reg 5 $ hazard_if_id_rs2_idx [4:0] $end
$var reg 1 % hazard_stall $end
$var reg 5 & forward_ex_rs1_idx [4:0] $end
$var reg 5 ' forward_ex_rs2_idx [4:0] $end
$var reg 1 ( forward_ex_mem_regWrite $end
$var reg 5 ) forward_ex_mem_rd_idx [4:0] $end
$var reg 1 * forward_mem_wb_regWrite $end
$var reg 5 + forward_mem_wb_rd_idx [4:0] $end
$var reg 2 , forwardA [1:0] $end
$var reg 2 - forwardB [1:0] $end

$scope module hazard_inst $end
$var wire 1 . id_ex_memRead $end
$var wire 1 / id_ex_rd_idx [4] $end
$var wire 1 0 id_ex_rd_idx [3] $end
$var wire 1 1 id_ex_rd_idx [2] $end
$var wire 1 2 id_ex_rd_idx [1] $end
$var wire 1 3 id_ex_rd_idx [0] $end
$var wire 1 4 if_id_rs1_idx [4] $end
$var wire 1 5 if_id_rs1_idx [3] $end
$var wire 1 6 if_id_rs1_idx [2] $end
$var wire 1 7 if_id_rs1_idx [1] $end
$var wire 1 8 if_id_rs1_idx [0] $end
$var wire 1 9 if_id_rs2_idx [4] $end
$var wire 1 : if_id_rs2_idx [3] $end
$var wire 1 ; if_id_rs2_idx [2] $end
$var wire 1 < if_id_rs2_idx [1] $end
$var wire 1 = if_id_rs2_idx [0] $end
$var reg 1 > stall $end
$upscope $end

$scope module forward_inst $end
$var wire 1 ? ex_rs1_idx [4] $end
$var wire 1 @ ex_rs1_idx [3] $end
$var wire 1 A ex_rs1_idx [2] $end
$var wire 1 B ex_rs1_idx [1] $end
$var wire 1 C ex_rs1_idx [0] $end
$var wire 1 D ex_rs2_idx [4] $end
$var wire 1 E ex_rs2_idx [3] $end
$var wire 1 F ex_rs2_idx [2] $end
$var wire 1 G ex_rs2_idx [1] $end
$var wire 1 H ex_rs2_idx [0] $end
$var wire 1 I ex_mem_regWrite $end
$var wire 1 J ex_mem_rd_idx [4] $end
$var wire 1 K ex_mem_rd_idx [3] $end
$var wire 1 L ex_mem_rd_idx [2] $end
$var wire 1 M ex_mem_rd_idx [1] $end
$var wire 1 N ex_mem_rd_idx [0] $end
$var wire 1 O mem_wb_regWrite $end
$var wire 1 P mem_wb_rd_idx [4] $end
$var wire 1 Q mem_wb_rd_idx [3] $end
$var wire 1 R mem_wb_rd_idx [2] $end
$var wire 1 S mem_wb_rd_idx [1] $end
$var wire 1 T mem_wb_rd_idx [0] $end
$var reg 2 U forwardA [1:0] $end
$var reg 2 V forwardB [1:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
b101 "
b11 #
b100 $
0%
0>
bx &
bx '
x(
bx )
x*
bx +
b0 ,
b0 -
b0 U
b0 V
0.
13
02
11
00
0/
18
17
06
05
04
0=
0<
1;
0:
09
xC
xB
xA
x@
x?
xH
xG
xF
xE
xD
xI
xN
xM
xL
xK
xJ
xO
xT
xS
xR
xQ
xP
$end
#10000
1!
b11 "
1.
12
01
1>
1%
#20000
b10 &
b11 '
0(
b0 )
0*
b0 +
0I
0O
0T
0S
0R
0Q
0P
0N
0M
0L
0K
0J
1H
1G
0F
0E
0D
0C
1B
0A
0@
0?
#30000
b111 &
1(
b111 )
1I
1N
1M
1L
1C
1A
b10 U
b10 ,
#40000
b10 &
b1000 '
0(
b0 )
1*
b1000 +
0I
1O
1Q
0N
0M
0L
0H
0G
1E
0C
0A
b0 U
b1 V
b1 -
b0 ,
