`timescale 1ns/1ps

// EX_stage：执行阶段
// EX_stage: Execution stage
// 负责执行各种运算，包括 ALU 操作和自定义指令
// Responsible for performing various operations, including ALU operations and custom instructions

module EX_stage(
    input  logic [31:0] rs1_val,    // 寄存器源操作数1
                                   // Register source operand #1
    input  logic [31:0] rs2_val,    // 寄存器源操作数2
                                   // Register source operand #2
    input  logic [31:0] imm,        // 立即数
                                   // Immediate value
    input  logic        use_imm,    // =1时，第二操作数使用imm
                                   // =1 indicates the second operand should be 'imm'
    input  logic [3:0]  alu_ctrl,   // ALU控制信号
                                   // ALU control signals
    output logic [31:0] alu_result  // ALU计算结果
                                   // Result from ALU
);

    // 选择 opA 和 opB 作为 ALU 的两个操作数
    // Select opA and opB as the two ALU operands
    logic [31:0] opA, opB;
    assign opA = rs1_val;
    assign opB = use_imm ? imm : rs2_val;

    // ALU 核心逻辑
    // Core logic of the ALU
    always_comb begin
        
		  case (alu_ctrl)
            4'd0:  alu_result = opA + opB; // ADD 加法
                                          // ADD operation
            4'd1:  alu_result = opA - opB; // SUB 减法
                                          // SUB operation
            4'd2:  alu_result = opA & opB; // AND 位与
                                          // Bitwise AND
            4'd3:  alu_result = opA | opB; // OR 位或
                                          // Bitwise OR
            4'd4:  alu_result = opA ^ opB; // XOR 位异或
                                          // Bitwise XOR

            
				4'h8: begin
                // 自定义指令: ReLU (激活函数)
                // Custom instruction: ReLU (activation function)
                // 如果 opA < 0，则输出 0；否则输出 opA 原值
                // If opA < 0, output 0; otherwise, output opA
                if ($signed(opA) < 0)
                    
						  alu_result = 32'd0;
                
					 else
                    alu_result = opA;
            end

            4'h9: begin
                // 自定义指令: 矩阵乘法 (2x2, 8-bit)
                // Custom instruction: 2x2 matrix multiplication (8-bit)
                
                // 定义 2x2 矩阵 A 和 B，每个元素 8 位 (byte)
                // Define 2x2 matrices A and B, each element is 8 bits
                byte unsigned a00, a01, a10, a11;
                byte unsigned b00, b01, b10, b11;
                
                // 拆分 opA 和 opB 成 4 个 byte 分量
                // Decompose opA and opB into 4 byte components
                {a11, a10, a01, a00} = opA;
                {b11, b10, b01, b00} = opB;

                // 计算矩阵乘法中间结果 (16 位寄存)
                // Compute partial products for matrix multiplication (16-bit storage) put 16 bit first then truncation
                logic [15:0] p00, p01, p10, p11;
                p00 = a00*b00 + a01*b10;
                p01 = a00*b01 + a01*b11;
                p10 = a10*b00 + a11*b10;
                p11 = a10*b01 + a11*b11;

                // 只取各乘积的低 8 位，组成结果矩阵
                // Take the lower 8 bits of each product to form the result matrix
                byte unsigned c00 = p00[7:0];
                byte unsigned c01 = p01[7:0];
                byte unsigned c10 = p10[7:0];
                byte unsigned c11 = p11[7:0];

                // 将结果打包成 32 位输出
                // Pack them into a 32-bit output, cuz matrix 4*8 = 32
                alu_result = {c11, c10, c01, c00};
            end

            
				4'hA: begin
                // 自定义指令: 向量加法 (2个16位整数)
                // Custom instruction: Vector addition (two 16-bit values)
                
                // 把 opA, opB 分别拆成上下各 16 位
                // Decompose opA, opB into two 16-bit segments each
                logic [15:0] A0, A1, B0, B1;
                {A1, A0} = opA;
                {B1, B0} = opB;

                // 用 17 位存储以防止加法进位丢失
                // Use 17-bit storage to avoid losing carry
                logic [16:0] sum0, sum1;
                sum0 = A0 + B0;
                sum1 = A1 + B1;

                // 将结果的低16位写回 alu_result
                // Write the lower 16 bits of each sum back to alu_result
                alu_result[15:0]  = sum0[15:0];
                alu_result[31:16] = sum1[15:0];
            end

            default: alu_result = 32'd0; // 默认值: 0
                                         // Default: 0
        endcase
    end

endmodule
